
/***** Horizontal separator *****/
/*** Line ***/

.pe-horizontal-separator--line {
  flex-grow: 1;
}

/*** Line ***/
/***** Horizontal separator *****/



/***** Label *****/
/*** Wrapper ***/

.pe-label {
  /* TEMP
   * 2022.11.26
   * A bubble elemen megjelenített hosszu feliratok kilogtak a bubble elemből.
   * Ha nem okoz máshol gondot, akkor a max-width beállítása maradhat véglegesen is majd! */

   /* text-overflow pretty attribute szabályozza már natívan */
  -max-width: 100%;
}

/*** Wrapper ***/
/***** Label *****/



/***** Menu bar *****/
/*** Item ***/

/* */
/* Az .pe-menu-bar--menu-item elemben alkalmazott esztétikai távolságok (margin, padding),
 * meg kell feleljenek a felsorolt felhasználási módoknak:
 * 1. A menü-elemek kizárólag ikonokat jelenítenek meg
 * 2. A menü-elemek kizárólag feliratokat jelenítenek meg
 * 3. A menü-elemek ikonokat és feliratokat jelenítenek meg */
/* TODO
 * Az 1.-es és 3.-as (ikon-gomb és ikon-gomb felirattal) legyen egy külön elemtípus! */
.pe-menu-bar--menu-item-body {
  align-items: center;
  display:     flex;

  /* Sets the distance between item labels and icons.  */
  column-gap: 6px;
}

/*** Item ***/
/***** Menu bar *****/



/***** Notification bubble *****/
/*** Body ***/

.pe-notification-bubble--body {
  align-items:     center;
  display:         flex;
  justify-content: space-between;
}

/*** Body ***/
/***** Notification bubble *****/



/***** Row *****/
/*** Body ***/

.pe-row--body {
  display: flex;
  width:   100%;

  /* XXX#6667 */
  /* The {height: 100%} setting is necessary to make the content vertically alignable! */
  height: 100%;
}

/*** Body ***/
/***** Row *****/



/***** Spacer *****/

.pe-horizontal-spacer,
.pe-vertical-spacer {
  flex-shrink: 0;
}

/***** Spacer *****/


/***** Surface *****/
/*** Body ***/

.pe-surface--body {
  /* Fade animations use the translateX function; and the hidden overflow content setting makes
   * the content appear/disappear within(!) the surface body. */
  overflow: hidden;
}

/*** Body ***/

/*** Content ***/

.pe-surface--content {
  animation-fill-mode: both;
  animation-duration:  350ms;
}

:not(:only-child).pe-surface--content.tc-exit-active {
  /* In case the surface already contains the new content; disappearing content must be absolutely positioned
   * to make space for the new content. */
  left:     0;
  position: absolute;
  top:      0;
}

:not([data-animation-direction]) .pe-surface--content.tc-exit-active {
  /* Contents disappearing without animation must be transparent until they are unmounted from the React tree. */
  opacity: 0
}

[data-animation-direction="ltr"] .pe-surface--content.tc-appear-active { animation-name: fade-in-ltr;  }
[data-animation-direction="ltr"] .pe-surface--content.tc-enter-active  { animation-name: fade-in-ltr;  }
[data-animation-direction="ltr"] .pe-surface--content.tc-exit-active   { animation-name: fade-out-ltr; }
[data-animation-direction="rtl"] .pe-surface--content.tc-appear-active { animation-name: fade-in-rtl;  }
[data-animation-direction="rtl"] .pe-surface--content.tc-enter-active  { animation-name: fade-in-rtl;  }
[data-animation-direction="rtl"] .pe-surface--content.tc-exit-active   { animation-name: fade-out-rtl; }
[data-animation-direction="ttb"] .pe-surface--content.tc-appear-active { animation-name: fade-in-ttb;  }
[data-animation-direction="ttb"] .pe-surface--content.tc-enter-active  { animation-name: fade-in-ttb;  }
[data-animation-direction="ttb"] .pe-surface--content.tc-exit-active   { animation-name: fade-out-ttb; }
[data-animation-direction="btt"] .pe-surface--content.tc-appear-active { animation-name: fade-in-btt;  }
[data-animation-direction="btt"] .pe-surface--content.tc-enter-active  { animation-name: fade-in-btt;  }
[data-animation-direction="btt"] .pe-surface--content.tc-exit-active   { animation-name: fade-out-btt; }

/*** Content ***/
/***** Surface *****/



/***** Text *****/
/*** Body ***/

.pe-text--body {
  display: flex;
  flex-direction: column;

  /* The word-break property splits words into chunks! Don't use it! */
  -word-break: break-all;
}

.pe-text--body[data-cropped="true"] {
  justify-content: flex-start;
  overflow-y: hidden;
}

.pe-text--body[data-cropped="true"]::after {
  background-image: linear-gradient(0deg, white, transparent);
  bottom: 0;
 -content: '';
  height: 10px;
  left: 0;
  position: absolute;
  width: 100%;
}

/*** Body ***/

/*** Copyable ***/

.pe-text--copyable {
  display: flex;
  max-width: 100%;
}

/*** Copyable ***/
/***** Text *****/



/***** Thumbnail *****/
/*** Icon ***/

.pe-thumbnail--icon {
  height:   100%;
  left:     0;
  position: absolute;
  top:      0;
  width:    100%;
}

/*** Icon ***/

/*** Image ***/

.pe-thumbnail--image {
  flex-grow: 1;
  width:     100%;
}

/*** Image ***/
/***** Thumbnail *****/



/***** Toggle *****/
/*** Body ***/

.pe-toggle--body {
  /* The 'toggle' element doesn't use flex properties. Therefore, no '{:display :flex}' setting is applied.
   * When the ':href-uri' property is provide the toggle implements the A html tag.
   * The pretty-normalizer only sets the block display model for buttons not for anchors. */
  display: block;

  font-weight: 500;
  width:       100%;

  /* Normalizing 'text-align' user agent rule */
  text-align: left;
}

/*** Body ***/
/***** Toggle *****/



/***** Vertical separator *****/
/*** Line ***/

.pe-vertical-separator--line {
  flex-grow: 1;
}

/*** Line ***/
/***** Vertical separator *****/
